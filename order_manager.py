import os
import pandas as pd
import re
import random
import string
from telegram import Update
from telegram.ext import CallbackContext
import logging
from datetime import datetime, timedelta
from utility import Utils
import pytz

utils = Utils()

class OrderManager:
    def __init__(self, order_keyboard, file_options_keyboard):
        self.order_keyboard = order_keyboard
        self.file_options_keyboard = file_options_keyboard
        self.current_order = {}
        self.waiting_for_order = False
        self.income_folder = "/usr/src/app/income"
        self.outcome_folder = "/usr/src/app/outcome"
        self.order_file_path = None
        self.shipping_file_path = None

        # Create folders if they don't exist
        os.makedirs(self.income_folder, exist_ok=True)
        os.makedirs(self.outcome_folder, exist_ok=True)

    async def initiate_order_process(self, update: Update, context: CallbackContext):
        chat_id = update.effective_chat.id
        existing_order_file = self.find_existing_order_file(chat_id)

        if existing_order_file:
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –º–µ–Ω–µ–µ 2 –¥–Ω–µ–π –Ω–∞–∑–∞–¥. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë? (–¥–∞/–Ω–µ—Ç)"
            )
            context.user_data['existing_order_file'] = existing_order_file
            self.waiting_for_order = False
        else:
            self.start_new_order(chat_id)
            await update.message.reply_text("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.", reply_markup=self.order_keyboard)

    def start_new_order(self, chat_id):
        self.waiting_for_order = True
        self.current_order.clear()
        self.order_file_path = self.generate_order_file(chat_id)
        self.shipping_file_path = self.generate_shipping_file(chat_id)

    def find_existing_order_file(self, chat_id):
        for file_name in os.listdir(self.outcome_folder):
            if str(chat_id) in file_name:
                file_path = os.path.join(self.outcome_folder, file_name)
                file_mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                if datetime.now() - file_mod_time <= timedelta(days=2):
                    return file_path
        return None

    async def process_order(self, update: Update, context: CallbackContext):
        message_text = update.message.text.strip()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

        if message_text.lower() == '–¥–∞' and 'existing_order_file' in context.user_data:
            self.order_file_path = context.user_data['existing_order_file']
            self.shipping_file_path = self.order_file_path.replace('order_', 'shipping_')
            self.waiting_for_order = True
            await update.message.reply_text("‚úâÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É.")
            return
        elif message_text.lower() == '–Ω–µ—Ç' and 'existing_order_file' in context.user_data:
            os.remove(context.user_data['existing_order_file'])
            self.start_new_order(update.effective_chat.id)
            await update.message.reply_text("üóëÔ∏è –°—Ç–∞—Ä–∞—è –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞. ‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.", reply_markup=self.order_keyboard)
            return

        # Step by step input process
        if message_text.lower() == '–∫–æ–Ω–µ—Ü':
            await self.finalize_order(update)
            return

        if 'url' not in self.current_order:
            urls = re.findall(r'(https?://[^\s]+)', message_text)
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏: {urls}")

            if urls:
                self.current_order['url'] = urls[0]
                logging.info(f"–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {self.current_order['url']}")
                await update.message.reply_text("‚úâÔ∏è –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            else:
                logging.error("–û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif 'quantity' not in self.current_order:
            try:
                quantity = int(message_text)
                self.current_order['quantity'] = quantity
                logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {quantity}")
                await update.message.reply_text("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É.")
            except ValueError:
                logging.error(f"–û—à–∏–±–∫–∞: {message_text} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ).")
        elif 'price' not in self.current_order:
            try:
                price = float(message_text)
                self.current_order['price'] = price
                logging.info(f"–¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {price}")
                await update.message.reply_text("‚úÖ –¶–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
            except ValueError:
                logging.error(f"–û—à–∏–±–∫–∞: {message_text} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ).")
        elif 'name' not in self.current_order:
            self.current_order['name'] = message_text
            logging.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message_text}")
            await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –∏ —Ç.–¥.).")
        elif 'options' not in self.current_order:
            self.current_order['options'] = message_text
            logging.info(f"–û–ø—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {message_text}")
            await self.add_order(update)
            await update.message.reply_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–∫–æ–Ω–µ—Ü' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")

    async def add_order(self, update: Update):
        if len(self.current_order) >= 5:
            self.save_order_to_file()
            self.save_shipping_file()
            self.current_order.clear()
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    async def finalize_order(self, update: Update):
        if self.order_file_path and os.path.exists(self.order_file_path):
            await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")

            with open(self.order_file_path, 'rb') as file:
                await update.message.reply_document(document=file, filename=os.path.basename(self.order_file_path))
            if self.shipping_file_path and os.path.exists(self.shipping_file_path):
                with open(self.shipping_file_path, 'rb') as file:
                    await update.message.reply_document(document=file, filename=os.path.basename(self.shipping_file_path))
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.")

    def save_order_to_file(self):
        if not self.order_file_path:
            return

        if not os.path.exists(self.order_file_path):
            logging.info(f"–§–∞–π–ª {self.order_file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
            df = pd.DataFrame(columns=['–°—Å—ã–ª–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø—Ü–∏–∏'])
        else:
            df = pd.read_excel(self.order_file_path)

        new_order = pd.DataFrame([{
            '–°—Å—ã–ª–∫–∞': self.current_order.get('url', ''),
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': self.current_order.get('quantity', ''),
            '–¶–µ–Ω–∞': self.current_order.get('price', ''),
            '–ù–∞–∑–≤–∞–Ω–∏–µ': self.current_order.get('name', ''),
            '–û–ø—Ü–∏–∏': self.current_order.get('options', '')
        }])

        df = pd.concat([df, new_order], ignore_index=True)
        df.to_excel(self.order_file_path, index=False)
        logging.info(f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª: {self.order_file_path}")

    def save_shipping_file(self):
        if not self.shipping_file_path:
            return

        if not os.path.exists(self.shipping_file_path):
            logging.info(f"–§–∞–π–ª {self.shipping_file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
            df = pd.DataFrame(columns=['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞'])
        else:
            df = pd.read_excel(self.shipping_file_path)

        new_order = pd.DataFrame([{
            '–ù–∞–∑–≤–∞–Ω–∏–µ': self.current_order.get('name', ''),
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': self.current_order.get('quantity', ''),
            '–¶–µ–Ω–∞': self.current_order.get('price', '')
        }])

        df = pd.concat([df, new_order], ignore_index=True)
        df.to_excel(self.shipping_file_path, index=False)
        logging.info(f"–§–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {self.shipping_file_path}")

    def generate_order_file(self, chat_id):
        tz = pytz.timezone('Asia/Seoul')
        current_time = datetime.now(tz).strftime('%Y-%m-%d_%H-%M-%S')
        random_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        return os.path.join(self.outcome_folder, f"order_{chat_id}_{random_code}_{current_time}.xlsx")

    def generate_shipping_file(self, chat_id):
        tz = pytz.timezone('Asia/Seoul')
        current_time = datetime.now(tz).strftime('%Y-%m-%d_%H-%M-%S')
        random_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        return os.path.join(self.outcome_folder, f"shipping_{chat_id}_{random_code}_{current_time}.xlsx")